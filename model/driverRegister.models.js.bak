'use strict';
"--unhandled-rejections=strict";

const mongoose = require("mongoose");
// const Joi = require('@hapi/joi');
//const { string } = require("@hapi/joi");
const validator = require('validator');

const driverSchema = new mongoose.Schema({

  DriverId :{type: mongoose.Schema.Types.ObjectId,},

  phone : {
    type : String,
    trim: true,
    required : true,
    minlength : 10,
    match : (/^\d{10}$/g)
  },
  
  email: {
    type: String,
    lowercase: true,
    unique: true,
    trim: true,
    required : true,
    validate : [/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/],
    match: [/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/],
},
    m_otp : {
      type:String,
      trim: true,
      required : true},

    drivername : {
      type:String,
      trim: true,
      //required : true
    },

    deviceType : {
      type:String,
      trim: true,
      required : true},

    password :  {  
      type: String,
        minlength: 6,
        // maxlength :20,
        match:(/^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[^a-zA-Z0-9]).{8,1024}$/),
      trim: true,
      required : true},

    // resetLink: {
    //   data: String,
    //   default: "",
    // },

}, {timestamps : true});

module.exports = mongoose.model("DriverRegister", driverSchema);



// const m = new DriverRegister();

// phone : {
//   type : Number,
//   validate : {
//     validator :  function(v){
//       return /d{10}/.test(v);
//     },
//     message : '{VALUE} is not a valid 10 digit number!'
//   }
// },

// m.phone = '123456789';
// console.log(m.valiadateSync().toString());

// m.phone = '0123456789';
// console.log(m.valiadateSync().toString());

//_________________________________________//

// const DriverRegister = mongoose.model("DriverRegister",driverSchema)

// function validateUser(user) {
//   const schema = Joi.object().keys({
//     phone : string,
//     deviceType : {
//       type: String
//       // trim : true,
//       // required: true
//     },
//     email: Joi.string()
//       .min(8)
//       .max(50)
//       .required()
//       .email(),
//     password: Joi.string()
//       .min(6)
//       .required()
//       .max(20)
//       .regex(/^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[^a-zA-Z0-9]).{8,1024}$/), 
//       //special/number/capital
//       drivername : String,
//       m_otp :  string,

//   });
//   return Joi.validate(user, schema);
// }

// module.exports.DriverRegister = DriverRegister;
// module.exports.validate = validateUser;


